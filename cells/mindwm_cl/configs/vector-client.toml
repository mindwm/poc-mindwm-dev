data_dir = "${HOME}/.local/mindwm/vector"

# Pipe bytestream from TMUX
# sanitize control sequences
# and publish clean word to MindWM backend
[sources.tmux_udp]
address = "${MINDWM_CLIENT_VECTOR_UDP_BIND}:${MINDWM_CLIENT_VECTOR_UDP_PORT}"
mode = "udp"
type = "socket"
decoding.codec = "bytes"

[transforms.tmux_chunks_raw]
inputs = ["tmux_udp"]
type = "reduce"
ends_when = """
  ends_with!(.message, " ")  ||
  ends_with!(.message, "\t") ||
  ends_with!(.message, "\n") ||
  ends_with!(.message, "\r")
"""
merge_strategies.message = "concat_raw"

[transforms.tmux_words]
inputs = [ "tmux_chunks_raw" ]
type = "remap"
source = """
  clean = strip_ansi_escape_codes!(.message)
  words = split(clean, r'( +|\\t+)')
  . = filter(words) -> |_i, v| { v != "" }
"""

[transforms.tmux_lines]
inputs = [ "tmux_words" ]
type = "reduce"
ends_when = """
  ends_with!(.message, "\n") ||
  ends_with!(.message, "$")
"""
merge_strategies.message = "concat"

# enrich with metadata
[transforms.with_meta]
type = "remap"
inputs = [ "tmux_words" ]
source = """
msg = .message
del(.)
.knativebrokerttl = "255"
.specversion = "1.0"
.type = "word"
.source = "${MINDWM_BACK_NATS_SUBJECT_WORDS_IN}"
.subject = "${MINDWM_BACK_NATS_SUBJECT_WORDS_IN}"
.datacontenttype = "application/json"
.data = {}
.data.word = msg
.id = uuid_v4()
"""

# publish to MindWM backend
[sinks.back_nats_words]
inputs = [ "with_meta" ]
type = "nats"
subject = "${MINDWM_BACK_NATS_SUBJECT_WORDS_IN}"
url = "nats://${MINDWM_BACK_NATS_HOST}:${MINDWM_BACK_NATS_PORT}"
encoding.codec = "json"
auth.strategy = "user_password"
auth.user_password.user = "${MINDWM_BACK_NATS_USER}"
auth.user_password.password = "${MINDWM_BACK_NATS_PASS}"

[sinks.debug]
#inputs = ["with_meta"]
#inputs = ["test"]
#inputs = ["tmux_lines", "tmux_udp"]
inputs = ["tmux_lines"]
type = "console"
#encoding.codec = "json"
encoding.codec = "text"
